
lexer grammar LexerFile;



fragment A:('a'|'A');
fragment B:('b'|'B');
fragment C:('c'|'C');
fragment D:('d'|'D');
fragment E:('e'|'E');
fragment F:('f'|'F');
fragment G:('g'|'G');
fragment H:('h'|'H');
fragment I:('i'|'I');
fragment J:('j'|'J');
fragment K:('k'|'K');
fragment L:('l'|'L');
fragment M:('m'|'M');
fragment N:('n'|'N');
fragment O:('o'|'O');
fragment P:('p'|'P');
fragment Q:('q'|'Q');
fragment R:('r'|'R');
fragment S:('s'|'S');
fragment T:('t'|'T');
fragment U:('u'|'U');
fragment V:('v'|'V');
fragment W:('w'|'W');
fragment X:('x'|'X');
fragment Y:('y'|'Y');
fragment Z:('z'|'Z');

FOR : F O R;
DIV : D I V ;
OR  : O R ;
AND : A N D ;
NOT : N O T ;
IF  : I F ;
THEN : T H E N ;
ELSE : E L S E ;
OF : O F ;
WHILE : W H I L E;
DO : D O ;
BEGIN : B E G I N ;
END : E N D ;
READ : R E A D ;
WRITE : W R I T E ;
VAR : V A R ;
ARRAY : A R R A Y;
PROCEDURE : P R O C E D U R E;
PROGRAM : P R O G R A M;

LETTER : [a-zA-Z]+;
DIGIT  : [0-9]+;

PLUS : '+';
MINUS : '-';
MULT : '*';
EQUALS : '=';
RT : '>';
LT : '<';
LE : '<=';
RE : '>=';
LR : '<>';
OP : '(';
CP : ')';
OC : '[';
CC : ']';
ATTRIB : ':=';
DOT : '.';
COMMA : ',';
SMCOLON : ';';
COLON : ':';
DBDOT : '..';
INTEGER : I N T E G E R;
BOOLEAN : B O O L E A N ;
FLOAT : F L O A T ;
STRING : S T R I N G ;
TRUE : T R U E ;
FALSE : F A L S E;
STR     :  [a-zA-Z0-9\t ]*;
ID     :    ('a'..'z'|'A'..'Z')('a'..'z'|'A'..'Z'|'0'..'9'|'_')*;
WS      : [\n\r \t]+ -> skip;
